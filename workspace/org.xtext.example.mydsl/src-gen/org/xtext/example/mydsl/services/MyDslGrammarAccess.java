/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConfigurationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRelationshipParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Model:
		//	node | configuration | relationship;
		public ParserRule getRule() { return rule; }

		//node | configuration | relationship
		public Alternatives getAlternatives() { return cAlternatives; }

		//node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }

		//configuration
		public RuleCall getConfigurationParserRuleCall_1() { return cConfigurationParserRuleCall_1; }

		//relationship
		public RuleCall getRelationshipParserRuleCall_2() { return cRelationshipParserRuleCall_2; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentsComponentParserRuleCall_3_0 = (RuleCall)cComponentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//configuration:
		//	"configuration" name=ID "{" components+=component* "}";
		public ParserRule getRule() { return rule; }

		//"configuration" name=ID "{" components+=component* "}"
		public Group getGroup() { return cGroup; }

		//"configuration"
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//components+=component*
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }

		//component
		public RuleCall getComponentsComponentParserRuleCall_3_0() { return cComponentsComponentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//node:
		//	"node" name=ID;
		public ParserRule getRule() { return rule; }

		//"node" name=ID
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRelationshipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationshipRelationshipParserRuleCall_2_0 = (RuleCall)cRelationshipAssignment_2.eContents().get(0);
		
		//component:
		//	"component" name=ID relationship+=relationship*;
		public ParserRule getRule() { return rule; }

		//"component" name=ID relationship+=relationship*
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//relationship+=relationship*
		public Assignment getRelationshipAssignment_2() { return cRelationshipAssignment_2; }

		//relationship
		public RuleCall getRelationshipRelationshipParserRuleCall_2_0() { return cRelationshipRelationshipParserRuleCall_2_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relationship");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHostedByParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotHostedByParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCollocatedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSeparatedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//relationship:
		//	hostedBy | notHostedBy | collocated | separated;
		public ParserRule getRule() { return rule; }

		//hostedBy | notHostedBy | collocated | separated
		public Alternatives getAlternatives() { return cAlternatives; }

		//hostedBy
		public RuleCall getHostedByParserRuleCall_0() { return cHostedByParserRuleCall_0; }

		//notHostedBy
		public RuleCall getNotHostedByParserRuleCall_1() { return cNotHostedByParserRuleCall_1; }

		//collocated
		public RuleCall getCollocatedParserRuleCall_2() { return cCollocatedParserRuleCall_2; }

		//separated
		public RuleCall getSeparatedParserRuleCall_3() { return cSeparatedParserRuleCall_3; }
	}

	public class HostedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hostedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHostedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//hostedBy:
		//	"hostedBy" node;
		public ParserRule getRule() { return rule; }

		//"hostedBy" node
		public Group getGroup() { return cGroup; }

		//"hostedBy"
		public Keyword getHostedByKeyword_0() { return cHostedByKeyword_0; }

		//node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
	}

	public class NotHostedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "notHostedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNothostedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//notHostedBy:
		//	"nothostedBy" node;
		public ParserRule getRule() { return rule; }

		//"nothostedBy" node
		public Group getGroup() { return cGroup; }

		//"nothostedBy"
		public Keyword getNothostedByKeyword_0() { return cNothostedByKeyword_0; }

		//node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
	}

	public class CollocatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "collocated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollocatedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//collocated:
		//	"collocated" component;
		public ParserRule getRule() { return rule; }

		//"collocated" component
		public Group getGroup() { return cGroup; }

		//"collocated"
		public Keyword getCollocatedKeyword_0() { return cCollocatedKeyword_0; }

		//component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class SeparatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "separated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeparatedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//separated:
		//	"separated" component;
		public ParserRule getRule() { return rule; }

		//"separated" component
		public Group getGroup() { return cGroup; }

		//"separated"
		public Keyword getSeparatedKeyword_0() { return cSeparatedKeyword_0; }

		//component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final ConfigurationElements pConfiguration;
	private final NodeElements pNode;
	private final ComponentElements pComponent;
	private final RelationshipElements pRelationship;
	private final HostedByElements pHostedBy;
	private final NotHostedByElements pNotHostedBy;
	private final CollocatedElements pCollocated;
	private final SeparatedElements pSeparated;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConfiguration = new ConfigurationElements();
		this.pNode = new NodeElements();
		this.pComponent = new ComponentElements();
		this.pRelationship = new RelationshipElements();
		this.pHostedBy = new HostedByElements();
		this.pNotHostedBy = new NotHostedByElements();
		this.pCollocated = new CollocatedElements();
		this.pSeparated = new SeparatedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	node | configuration | relationship;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//configuration:
	//	"configuration" name=ID "{" components+=component* "}";
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//node:
	//	"node" name=ID;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//component:
	//	"component" name=ID relationship+=relationship*;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//relationship:
	//	hostedBy | notHostedBy | collocated | separated;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//hostedBy:
	//	"hostedBy" node;
	public HostedByElements getHostedByAccess() {
		return pHostedBy;
	}
	
	public ParserRule getHostedByRule() {
		return getHostedByAccess().getRule();
	}

	//notHostedBy:
	//	"nothostedBy" node;
	public NotHostedByElements getNotHostedByAccess() {
		return pNotHostedBy;
	}
	
	public ParserRule getNotHostedByRule() {
		return getNotHostedByAccess().getRule();
	}

	//collocated:
	//	"collocated" component;
	public CollocatedElements getCollocatedAccess() {
		return pCollocated;
	}
	
	public ParserRule getCollocatedRule() {
		return getCollocatedAccess().getRule();
	}

	//separated:
	//	"separated" component;
	public SeparatedElements getSeparatedAccess() {
		return pSeparated;
	}
	
	public ParserRule getSeparatedRule() {
		return getSeparatedAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
