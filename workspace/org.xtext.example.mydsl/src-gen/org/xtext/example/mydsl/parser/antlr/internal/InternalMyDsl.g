/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getNodeParserRuleCall_0()); 
    }
    this_node_0=rulenode
    { 
        $current = $this_node_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getConfigurationParserRuleCall_1()); 
    }
    this_configuration_1=ruleconfiguration
    { 
        $current = $this_configuration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getRelationshipParserRuleCall_2()); 
    }
    this_relationship_2=rulerelationship
    { 
        $current = $this_relationship_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleconfiguration
entryRuleconfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	 iv_ruleconfiguration=ruleconfiguration 
	 { $current=$iv_ruleconfiguration.current; } 
	 EOF 
;

// Rule configuration
ruleconfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='configuration' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getConfigurationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConfigurationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigurationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigurationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getComponentsComponentParserRuleCall_3_0()); 
	    }
		lv_components_3_0=rulecomponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_3_0, 
        		"component");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigurationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulenode
entryRulenode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_rulenode=rulenode 
	 { $current=$iv_rulenode.current; } 
	 EOF 
;

// Rule node
rulenode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='node' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeAccess().getNodeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulecomponent
entryRulecomponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_rulecomponent=rulecomponent 
	 { $current=$iv_rulecomponent.current; } 
	 EOF 
;

// Rule component
rulecomponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getRelationshipRelationshipParserRuleCall_2_0()); 
	    }
		lv_relationship_2_0=rulerelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"relationship",
        		lv_relationship_2_0, 
        		"relationship");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulerelationship
entryRulerelationship returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipRule()); }
	 iv_rulerelationship=rulerelationship 
	 { $current=$iv_rulerelationship.current; } 
	 EOF 
;

// Rule relationship
rulerelationship returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationshipAccess().getHostedByParserRuleCall_0()); 
    }
    this_hostedBy_0=rulehostedBy
    { 
        $current = $this_hostedBy_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRelationshipAccess().getNotHostedByParserRuleCall_1()); 
    }
    this_notHostedBy_1=rulenotHostedBy
    { 
        $current = $this_notHostedBy_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRelationshipAccess().getCollocatedParserRuleCall_2()); 
    }
    this_collocated_2=rulecollocated
    { 
        $current = $this_collocated_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRelationshipAccess().getSeparatedParserRuleCall_3()); 
    }
    this_separated_3=ruleseparated
    { 
        $current = $this_separated_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulehostedBy
entryRulehostedBy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHostedByRule()); }
	 iv_rulehostedBy=rulehostedBy 
	 { $current=$iv_rulehostedBy.current; } 
	 EOF 
;

// Rule hostedBy
rulehostedBy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='hostedBy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHostedByAccess().getHostedByKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getHostedByAccess().getNodeParserRuleCall_1()); 
    }
    this_node_1=rulenode
    { 
        $current = $this_node_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenotHostedBy
entryRulenotHostedBy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotHostedByRule()); }
	 iv_rulenotHostedBy=rulenotHostedBy 
	 { $current=$iv_rulenotHostedBy.current; } 
	 EOF 
;

// Rule notHostedBy
rulenotHostedBy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='nothostedBy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotHostedByAccess().getNothostedByKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNotHostedByAccess().getNodeParserRuleCall_1()); 
    }
    this_node_1=rulenode
    { 
        $current = $this_node_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecollocated
entryRulecollocated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollocatedRule()); }
	 iv_rulecollocated=rulecollocated 
	 { $current=$iv_rulecollocated.current; } 
	 EOF 
;

// Rule collocated
rulecollocated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='collocated' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCollocatedAccess().getCollocatedKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getCollocatedAccess().getComponentParserRuleCall_1()); 
    }
    this_component_1=rulecomponent
    { 
        $current = $this_component_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleseparated
entryRuleseparated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSeparatedRule()); }
	 iv_ruleseparated=ruleseparated 
	 { $current=$iv_ruleseparated.current; } 
	 EOF 
;

// Rule separated
ruleseparated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='separated' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSeparatedAccess().getSeparatedKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getSeparatedAccess().getComponentParserRuleCall_1()); 
    }
    this_component_1=rulecomponent
    { 
        $current = $this_component_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


